import { useState, useEffect } from 'react';
import { Ladder } from './components/Ladder';
import { ChallengeModal } from './components/ChallengeModal';
import { initialPlayers } from './data';
import { Trophy, Calendar, Users, Award, AlertCircle, Heart, MessageSquare, Bell, Swords, HelpCircle, ChevronDown, ChevronUp, X } from 'lucide-react';
import type { Player, Challenge, Match } from './types';

function App() {
  const [players, setPlayers] = useState(initialPlayers);
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);
  const [challenges, setChallenges] = useState<Challenge[]>([]);
  const [matches, setMatches] = useState<Match[]>([]);
  const [notifications, setNotifications] = useState<string[]>([]);
  const [showRules, setShowRules] = useState(false);
  const daysRemaining = 75;

  const handleChallenge = (player: Player) => {
    if (player.lives === 0) {
      alert('You need at least 1 life to challenge!');
      return;
    }
    if (player.weeklyMatches >= 2) {
      alert('You have reached your weekly match limit!');
      return;
    }
    setSelectedPlayer(player);
  };

  const handleChallengeSubmit = (challenge: Challenge) => {
    const deadline = new Date();
    deadline.setHours(deadline.getHours() + 24);
    
    const newChallenge: Challenge = {
      ...challenge,
      responseDeadline: deadline.toISOString(),
    };
    
    setChallenges([...challenges, newChallenge]);
    
    // Add notification
    const challenger = players.find(p => p.id === challenge.challengerId);
    const defender = players.find(p => p.id === challenge.defenderId);
    if (challenger && defender) {
      const notification = `${challenger.name} has challenged ${defender.name} for position #${defender.position}!`;
      setNotifications(prev => [notification, ...prev].slice(0, 10));
    }
    
    setSelectedPlayer(null);
  };

  const handleMatchComplete = (challenge: Challenge, winnerId: string) => {
    const updatedPlayers = [...players];
    const defender = updatedPlayers.find(p => p.id === challenge.defenderId);
    const challenger = updatedPlayers.find(p => p.id === challenge.challengerId);
    
    if (defender && challenger) {
      const date = new Date().toISOString();
      
      // Create match record
      const match: Match = {
        id: Math.random().toString(36).substr(2, 9),
        challengerId: challenger.id,
        defenderId: defender.id,
        date,
        completed: true,
        winnerId,
        score: "6-4, 7-5" // This should be input by the user in a real implementation
      };
      
      setMatches(prev => [match, ...prev]);
      
      // Defender wins
      if (winnerId === defender.id) {
        defender.lives = Math.min(5, defender.lives + 1); // Max 5 lives
        defender.matchesWon++;
        challenger.matchesLost++;
        challenger.lives--;
        
        // Add notification
        const notification = `${defender.name} successfully defended position #${defender.position} against ${challenger.name}!`;
        setNotifications(prev => [notification, ...prev].slice(0, 10));
      } 
      // Challenger wins
      else {
        challenger.lives--;
        challenger.matchesWon++;
        defender.matchesLost++;
        
        // Swap positions
        const tempPos = defender.position;
        defender.position = challenger.position;
        challenger.position = tempPos;
        
        // Add notification
        const notification = `${challenger.name} defeated ${defender.name} to take position #${defender.position}!`;
        setNotifications(prev => [notification, ...prev].slice(0, 10));
      }
      
      // Update weekly matches and last match date
      defender.weeklyMatches++;
      challenger.weeklyMatches++;
      defender.lastMatchDate = date;
      challenger.lastMatchDate = date;
      
      setPlayers(updatedPlayers);
      
      // Update challenge status
      setChallenges(challenges.map(c => 
        c.id === challenge.id 
          ? { ...c, status: 'completed' }
          : c
      ));
    }
  };

  const handleChallengeResponse = (challenge: Challenge, accept: boolean) => {
    const updatedPlayers = [...players];
    const defender = updatedPlayers.find(p => p.id === challenge.defenderId);
    const challenger = updatedPlayers.find(p => p.id === challenge.challengerId);
    
    if (!accept && defender) {
      defender.challengesDeclined += 1;
      defender.lastChallengeResponse = 'declined';
      setPlayers(updatedPlayers);
      
      // Add notification
      if (challenger) {
        const notification = `${defender.name} declined ${challenger.name}'s challenge!`;
        setNotifications(prev => [notification, ...prev].slice(0, 10));
      }
    } else if (accept && defender && challenger) {
      defender.lastChallengeResponse = 'accepted';
      
      // Add notification
      const notification = `${defender.name} accepted ${challenger.name}'s challenge!`;
      setNotifications(prev => [notification, ...prev].slice(0, 10));
    }

    setChallenges(challenges.map(c => 
      c.id === challenge.id 
        ? { ...c, status: accept ? 'accepted' : 'declined' }
        : c
    ));
  };

  // Reset weekly matches every Monday
  useEffect(() => {
    const now = new Date();
    const monday = new Date();
    monday.setDate(now.getDate() - now.getDay() + 1);
    monday.setHours(0, 0, 0, 0);

    if (now >= monday) {
      setPlayers(prevPlayers =>
        prevPlayers.map(player => ({ ...player, weeklyMatches: 0 }))
      );
    }
  }, []);

  // Check for expired challenges
  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date();
      setChallenges(prevChallenges => 
        prevChallenges.map(challenge => {
          if (
            challenge.status === 'pending' && 
            new Date(challenge.responseDeadline) < now
          ) {
            const defender = players.find(p => p.id === challenge.defenderId);
            const challenger = players.find(p => p.id === challenge.challengerId);
            
            if (defender) {
              setPlayers(prevPlayers => 
                prevPlayers.map(p => 
                  p.id === defender.id 
                    ? { ...p, challengesDeclined: p.challengesDeclined + 1 }
                    : p
                )
              );
              
              // Add notification
              if (challenger) {
                const notification = `${defender.name} did not respond to ${challenger.name}'s challenge in time!`;
                setNotifications(prev => [notification, ...prev].slice(0, 10));
              }
            }
            return { ...challenge, status: 'declined', declineReason: 'timeout' };
          }
          return challenge;
        })
      );
    }, 60000);

    return () => clearInterval(interval);
  }, [players]);

  // Complete a match for accepted challenges
  const completeMatch = (challengeId: string, winnerId: string) => {
    const challenge = challenges.find(c => c.id === challengeId);
    if (challenge && challenge.status === 'accepted') {
      handleMatchComplete(challenge, winnerId);
    }
  };

  // Get active challenges
  const activeChallenges = challenges.filter(c => c.status === 'pending' || c.status === 'accepted');
  
  // Get recent matches
  const recentMatches = matches.slice(0, 5);

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-green-100">
      <div className="bg-green-800 text-white py-6 px-4">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold text-center mb-4">BSC Championship Singles Ladder</h1>
          
          <div className="grid grid-cols-3 gap-4 max-w-2xl mx-auto">
            <div className="bg-green-700/50 rounded-lg p-3 text-center">
              <Users className="w-5 h-5 mx-auto mb-1" />
              <p className="text-xl font-bold">{players.length}</p>
              <p className="text-xs">Warriors</p>
            </div>
            <div className="bg-green-700/50 rounded-lg p-3 text-center">
              <Calendar className="w-5 h-5 mx-auto mb-1" />
              <p className="text-xl font-bold">{daysRemaining}</p>
              <p className="text-xs">Days Left</p>
            </div>
            <div className="bg-green-700/50 rounded-lg p-3 text-center">
              <Award className="w-5 h-5 mx-auto mb-1" />
              <p className="text-xl font-bold">{activeChallenges.length}</p>
              <p className="text-xs">Active Challenges</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto py-6 px-4">
        {/* Notice Board */}
        <div className="bg-white rounded-lg shadow-md overflow-hidden mb-6">
          <div className="bg-green-700 text-white px-4 py-3 flex items-center justify-between">
            <h2 className="text-lg font-bold flex items-center">
              <MessageSquare className="w-5 h-5 mr-2" />
              Notice Board
            </h2>
          </div>
          
          <div className="p-4">
            {/* Recent Activity */}
            <div className="mb-5">
              <h3 className="font-semibold text-green-800 mb-2 flex items-center border-b pb-1">
                <Bell className="w-4 h-4 mr-2" />
                Recent Activity
              </h3>
              {notifications.length > 0 ? (
                <ul className="space-y-2">
                  {notifications.map((notification, index) => (
                    <li key={index} className="text-sm bg-green-50 p-2 rounded-md border-l-4 border-green-400">
                      {notification}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-sm text-gray-500 italic">No recent activity</p>
              )}
            </div>
            
            {/* Active Challenges */}
            <div className="mb-5">
              <h3 className="font-semibold text-green-800 mb-2 flex items-center border-b pb-1">
                <Swords className="w-4 h-4 mr-2" />
                Active Challenges
              </h3>
              {activeChallenges.length > 0 ? (
                <ul className="space-y-2">
                  {activeChallenges.map(challenge => {
                    const challenger = players.find(p => p.id === challenge.challengerId);
                    const defender = players.find(p => p.id === challenge.defenderId);
                    if (challenger && defender) {
                      return (
                        <li key={challenge.id} className="text-sm bg-blue-50 p-3 rounded-md border-l-4 border-blue-400">
                          <div className="flex justify-between items-start">
                            <div>
                              <div className="font-medium">
                                #{challenger.position} {challenger.name} vs #{defender.position} {defender.name}
                              </div>
                              <div className="text-xs mt-1 text-gray-600">
                                {new Date(challenge.date).toLocaleDateString()} • 
                                <span className={`ml-1 ${challenge.status === 'pending' ? 'text-yellow-600' : 'text-green-600'}`}>
                                  {challenge.status === 'pending' ? 'Pending' : 'Accepted'}
                                </span>
                              </div>
                            </div>
                            {challenge.status === 'accepted' && (
                              <div className="flex space-x-1">
                                <button
                                  onClick={() => completeMatch(challenge.id, defender.id)}
                                  className="text-xs bg-blue-600 text-white px-2 py-1 rounded-md hover:bg-blue-700 transition-colors"
                                >
                                  {defender.name} Won
                                </button>
                                <button
                                  onClick={() => completeMatch(challenge.id, challenger.id)}
                                  className="text-xs bg-green-600 text-white px-2 py-1 rounded-md hover:bg-green-700 transition-colors"
                                >
                                  {challenger.name} Won
                                </button>
                              </div>
                            )}
                          </div>
                        </li>
                      );
                    }
                    return null;
                  })}
                </ul>
              ) : (
                <p className="text-sm text-gray-500 italic">No active challenges</p>
              )}
            </div>
            
            {/* Recent Match Results */}
            <div>
              <h3 className="font-semibold text-green-800 mb-2 flex items-center border-b pb-1">
                <Trophy className="w-4 h-4 mr-2" />
                Recent Results
              </h3>
              {recentMatches.length > 0 ? (
                <ul className="space-y-2">
                  {recentMatches.map(match => {
                    const challenger = players.find(p => p.id === match.challengerId);
                    const defender = players.find(p => p.id === match.defenderId);
                    const winner = players.find(p => p.id === match.winnerId);
                    if (challenger && defender && winner) {
                      return (
                        <li key={match.id} className="text-sm bg-yellow-50 p-3 rounded-md border-l-4 border-yellow-400">
                        <div className="font-medium">
                          <strong>{winner.name}</strong> won against {winner.id === challenger.id ? defender.name : challenger.name}
                        </div>
                        <div className="text-xs mt-1 text-gray-600">
                          {new Date(match.date).toLocaleDateString()}
                          {match.score && <span className="ml-2 font-medium">({match.score})</span>}
                        </div>
                      </li>
                      );
                    }
                    return null;
                  })}
                </ul>
              ) : (
                <p className="text-sm text-gray-500 italic">No recent match results</p>
              )}
            </div>
          </div>
        </div>
        
        <Ladder 
          players={players} 
          challenges={challenges}
          onChallenge={handleChallenge}
          onRespond={handleChallengeResponse}
        />
      </div>

      {/* Floating Rules Button */}
      <div className="fixed bottom-4 right-4 z-10">
        <button 
          onClick={() => setShowRules(!showRules)}
          className="bg-green-600 text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg hover:bg-green-700 transition-colors focus:outline-none"
          aria-label="Show challenge rules"
        >
          <HelpCircle className="w-6 h-6" />
        </button>
      </div>

      {/* Collapsible Rules Modal */}
      {showRules && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-20 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] overflow-auto">
            <div className="bg-green-700 text-white px-4 py-3 flex justify-between items-center">
              <h2 className="text-lg font-bold flex items-center">
                <AlertCircle className="w-5 h-5 mr-2" />
                Challenge Rules
              </h2>
              <button 
                onClick={() => setShowRules(false)}
                className="text-white hover:text-green-200"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            <div className="p-5">
              <ul className="space-y-3">
                <li className="flex items-start">
                  <div className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">1</div>
                  <div>
                    <strong>Starting Lives:</strong> Each player starts with 2 lives 
                    <Heart className="w-4 h-4 inline text-red-500 fill-current ml-1" />
                  </div>
                </li>
                <li className="flex items-start">
                  <div className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">2</div>
                  <div>
                    <strong>Life System:</strong> Challenging costs 1 life, successful defense earns 1 life (maximum 5)
                  </div>
                </li>
                <li className="flex items-start">
                  <div className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">3</div>
                  <div>
                    <strong>Weekly Limit:</strong> Maximum 2 matches per week per player
                  </div>
                </li>
                <li className="flex items-start">
                  <div className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">4</div>
                  <div>
                    <strong>Counter-Challenges:</strong> Successful defenders can immediately counter-challenge up 1 position
                  </div>
                </li>
                <li className="flex items-start">
                  <div className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">5</div>
                  <div>
                    <strong>Challenge Range:</strong>
                    <ul className="ml-4 mt-1 space-y-1">
                      <li>• Top 5 players can only challenge 2 positions above</li>
                      <li>• Players below top 5 can challenge up to 3 positions above</li>
                    </ul>
                  </div>
                </li>
                <li className="flex items-start">
                  <div className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">6</div>
                  <div>
                    <strong>Timeframe:</strong> Matches must be completed within 7 days of acceptance
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
      )}

      {selectedPlayer && (
        <ChallengeModal
          challenger={selectedPlayer}
          players={players}
          onSubmit={handleChallengeSubmit}
          onClose={() => setSelectedPlayer(null)}
        />
      )}
    </div>
  );
}

export default App;